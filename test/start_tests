#!/usr/bin/env python3

import json
import logging
import glob
import requests

import urllib3
import youtube_dl

import config as conf
import test_video_server

from urllib.parse import quote_plus


def auth_setup():
    logging.info("Setting up permissions in the local auth server")
    ACL_SET_POLICY = ""
    for i in range(1, 5):
        ACL_SET_POLICY += "consumer@iisc.ac.in can access example.com/test-category/test-resource-" + str(
            i) + " for 1 month;"
    ACL_SET_POLICY += "consumer@iisc.ac.in can access example.com/test-category/test-resource.public for 1 month"

    ACL_SET_BODY = json.dumps(
        {
            "policy": ACL_SET_POLICY
        }
    )

    logging.info("Setting ACL policies for resources")
    requests.post(
        url=conf.ACL_SET_ENDPOINT,
        verify=False,
        cert=conf.PROVIDER_CREDENTIALS,
        data=ACL_SET_BODY,
        headers={"content-type": "application/json"}
    )

    logging.info("Requesting access tokens")
    resp = requests.post(
        url=conf.REQUEST_TOKEN_ENDPOINT,
        verify=False,
        cert=conf.CONSUMER_CREDENTIALS,
        data=conf.REQUEST_TOKEN_BODY,
        headers={"content-type": "application/json"}
    )
    return resp.json()


def download_videos():
    logging.info("Downloading videos")
    ydl_opts = {'outtmpl': '%(id)s.%(ext)s'}
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        ydl.download(conf.YOUTUBE_URL)

    # TODO: Temporary Fix, need to find the long term solution
    for vid in conf.VIDEOS.keys():
        for name in glob.glob(conf.VIDEOS[vid]+'*'):
            conf.VIDEOS[vid] = name


if __name__ == '__main__':

    logging.basicConfig(level=logging.INFO)
    for log_name, log_obj in logging.Logger.manager.loggerDict.items():
        if log_name != '<module name>':
            log_obj.disabled = True
    urllib3.disable_warnings()

    response = auth_setup()
    download_videos()

    for _id in conf.RESOURCE_ID.keys():
        conf.RESOURCE_ID[_id] = quote_plus(conf.RESOURCE_ID[_id])

    token = quote_plus(response['token'])
    logging.debug(token)

    # **********Testing Video Server***************
    test_video_server.test_record_length(token)
    test_video_server.test_token(token)
    test_video_server.test_id(token)
    test_video_server.test_hd_video(token)
    test_video_server.test_load(token)
    test_video_server.test_hls(token)
    # test_video_server.test_live_stream(token)
    # for i in conf.VIDEOS:
    #    os.remove(i)
